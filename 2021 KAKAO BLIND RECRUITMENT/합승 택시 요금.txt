#include <string>
#include <vector>
#include <iostream>
#include <queue>
using namespace std;

int solution(int n, int s, int a, int b, vector<vector<int> > fares) {
    int answer = 987654321;
    vector<vector<int> > dist(n+1, vector<int> (n+1,  987654321));
    
    //graph를 matrix에 저장
    for(int i=0; i<fares.size(); i++)
    {
        //fares[i][0]=vertex1, fares[i][1]=vertex2, fares[i][2]=fee
        dist[fares[i][0]][fares[i][1]]=fares[i][2];
        dist[fares[i][1]][fares[i][0]]=fares[i][2];
    }

    //플로이드 와샬 알고리즘을 통하여 i->j로 가는 최소값들 구해줌.
    for(int i=1; i<=n; i++)
    {
        for(int j=1; j<=n; j++)
        {
            for(int k=1; k<=n; k++)
            {
                if(j==k)
                    dist[j][k]=0;
                if(dist[j][k]>dist[j][i]+dist[i][k])
                    dist[j][k]=dist[j][i]+dist[i][k];
            }
        }
    }

    //중간에 하차하는 부분을 여러군데로 하여 값을 구해보고 그중에 최소값을 고름.
    for(int i=1; i<=n; i++)
    {
        long long result=(long long)dist[s][i]+dist[i][a]+dist[i][b];
        if(answer>result)
        {
            answer=result;
        }
    }
    return answer;
}
