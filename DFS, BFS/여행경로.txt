#include <string>
#include <vector>
#include <algorithm>
#include <iostream>
using namespace std;

bool dfs(string from, vector<vector<string>> &tickets, vector<int> &visited, vector<string> &temp, vector<string>& answer, int cnt)
{
	temp.push_back(from);

	if (cnt == tickets.size()) {
		answer = temp;
		return true;
	}
	for (int i = 0; i < tickets.size(); i++)
	{
		if (tickets[i][0] == from && visited[i] == 0)
		{
			visited[i] = 1;
			bool success = dfs(tickets[i][1], tickets, visited, temp, answer, cnt + 1);
			if (success)
				return true;
			visited[i] = 0;
		}
	}
	temp.pop_back();
	return false;
}

vector<string> solution(vector<vector<string>> tickets)
{
	vector<string> answer, temp;
	vector<int> visited(tickets.size(), 0);

	sort(tickets.begin(), tickets.end());
	dfs("ICN", tickets, visited, temp, answer, 0);
	return answer;
}
