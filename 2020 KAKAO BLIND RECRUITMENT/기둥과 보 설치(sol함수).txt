#include <string>
#include <vector>
#include <algorithm>
using namespace std;
int pillar[102][102];
int paper[102][102];
void init()
{
	int i;
	int j;
	for (i = 0; i < 102; i++)
	{
		for (j = 0; j < 102; j++)
		{
			pillar[i][j] = 0;
			paper[i][j] = 0;
		}
	}
}

vector<vector<int>> solution(int n, vector<vector<int>> build) {
	vector<vector<int>> answer;

	int i, j;
	int y, x;
	int a, b;
	init();
	int flag = 1;//삭제할수 있다.
	int tempx;
	int tempy;
	int size = build.size();
	for (i = 0; i < size; i++)
	{
		y = build[i][1];
		x = build[i][0];
		a = build[i][2];//0이면 기둥, 1이면 보;
		b = build[i][3];//0이면 삭제, 1이면 설치;
		if (b == 1)//설치
		{
			if (a == 0)//기둥 설치
			{
				if (x > n || x < 0 || y<0 || y>=n)//벽면을 벗어나게 기둥을 설치하는경우
				{

				}
				else if(y==0 || pillar[y-1][x]==1 || paper[y][x]==1 || paper[y][x-1]==1)
				{
					pillar[y][x] = 1;
				}
			}
			else if (a == 1)//보 설치
			{
				if (y == 0 || x>=n || x<0 || y>n)//벽면을 벗어나게 보를 설치하는 경우와 바닥에 보를 설치하는경우
				{

				}
				else if (pillar[y - 1][x] == 1 || pillar[y - 1][x + 1] == 1 || (paper[y][x - 1] == 1 && paper[y][x + 1] == 1))
				{
					paper[y][x] = 1;
				}
			}
		}
		else if (b == 0)//삭제
		{
			if (a == 0)//기둥 삭제
			{
				flag = 1;
				pillar[y][x] = 0;//현재기둥이 없다고 가정
				if (pillar[y + 1][x] == 1 && paper[y + 1][x - 1] == 0 && paper[y + 1][x] == 0)
				{
					flag = 0;
				}
				else
				{
					tempy = y + 1;
					tempx = x - 1;
					if (paper[tempy][tempx] == 1)//왼쪽위에보가 있고 그 보가 현재 기둥이 없으면 만들수 없을때 지울수 없음
					{
						if (pillar[tempy - 1][tempx] == 1 || pillar[tempy - 1][tempx + 1] == 1 || (paper[tempy][tempx - 1] == 1 && paper[tempy][tempx + 1] == 1))
						{


						}
						else
						{
							flag = 0;
						}
					}
					tempy = y + 1;
					tempx = x;
					if (paper[tempy][tempx] == 1)//오른쪽 위에 보가 있고 그 보가 현재 기둥이 없으면 만들수 없을때 지울수 없음
					{
						if (pillar[tempy - 1][tempx] == 1 || pillar[tempy - 1][tempx + 1] == 1 || (paper[tempy][tempx - 1] == 1 && paper[tempy][tempx + 1] == 1))
						{


						}
						else
						{
							flag = 0;
						}
					}
				}
				if (flag == 0)
					pillar[y][x] = 1;//flag가 0이면 지우지않음

			}
			else if (a == 1)//보 삭제
			{
				flag = 1;
				if ((pillar[y][x + 1] == 1 && paper[y][x + 1] == 0 && pillar[y - 1][x + 1] == 0))
				{

				}
				else if (pillar[y][x] == 1 && paper[y][x - 1] == 0 && pillar[y - 1][x] == 0)
				{

				}
				else
				{
					paper[y][x] = 0;
					tempx = x - 1;
					if (paper[y][tempx] == 1)//왼쪽에보가 있고 그 보가 현재 보가 없으면 만들수 없을때 지울수 없음
					{
						if (pillar[y - 1][tempx] == 1 || pillar[y - 1][tempx + 1] == 1 || (paper[y][tempx - 1] == 1 && paper[y][tempx + 1] == 1))
						{


						}
						else
						{
							flag = 0;
						}
					}
					tempx = x + 1;
					if (paper[y][tempx] == 1)//오른쪽에 보가 있고 그 보가 현재 보가 없으면 만들수 없을때 지울수 없음
					{
						if (pillar[y - 1][tempx] == 1 || pillar[y - 1][tempx + 1] == 1 || (paper[y][tempx - 1] == 1 && paper[y][tempx + 1] == 1))
						{


						}
						else
						{
							flag = 0;
						}
					}
					if (flag == 0)
						paper[y][x] = 1;
				}
			}
		}
	}
	vector<int> add;
	for (i = 0; i <= n; i++)
	{
		for (j = 0; j <= n; j++)
		{
			if (pillar[i][j] == 1)
			{
				add.push_back(j);
				add.push_back(i);
				add.push_back(0);
				answer.push_back(add);
				add.pop_back();
				add.pop_back();
				add.pop_back();

			}
			if (paper[i][j] == 1)
			{
				add.push_back(j);
				add.push_back(i);
				add.push_back(1);
				answer.push_back(add);
				add.pop_back();
				add.pop_back();
				add.pop_back();
			}
		}
	}
	sort(answer.begin(), answer.end());

	return answer;
}
