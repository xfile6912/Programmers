#include <string>
#include <vector>

using namespace std;

int solution(int n, vector<vector<int>> edge) {
	int answer = 0;
	int size = edge.size();
	vector<vector<int>> arr(n+1, vector<int> (n+1,0));
	vector<int> visited(n+1, 0);
	vector<int> dik(n + 1, 30000);
	int i, j;
	for (i = 0; i < size; i++)
	{
		arr[edge[i][0]][edge[i][1]] = 1;
		arr[edge[i][1]][edge[i][0]] = 1;
	}//그래프엣지 정리
	int min;
	int mini = 0;
	visited[1] = 1;
	dik[1] = 0;
	dik[0] = 1;//다익스트라 알고리즘 초기화
	int flag;
	for(i=1; i<n; i++)
	while(1)
	{
		for (i = 1; i <= n; i++)
		{
			if (arr[dik[0]][i] == 1 && visited[i] != 1)
			{
				if (dik[i] > dik[dik[0]] + arr[dik[0]][i])
					dik[i] = dik[dik[0]] + arr[dik[0]][i];
			}
		}
		min = 30000;//가장 작은 값가지는 곳 찾기
		mini = 0;
		for (i = 1; i <= n; i++)
		{
			if (visited[i] == 0 && min > dik[i])
			{
				min = dik[i];
				mini = i;
			}
		}
		if (mini == 0)
			break;
		visited[mini] = 1;//가장 작은값은 값이 확실하므로 visited 1로 초기화
		dik[0] = mini;
	}
	int max=0;
	for (i = 1; i <= n; i++)
	{
		if (dik[i] > max)
		{
			max = dik[i];
			answer = 1;
		}
		else if (dik[i] == max)
			answer++;
	}
	return answer;
}
